package model

//ActivityType is the type of an activity
type ActivityType string

//ActivityStatus is the status of an activity
type ActivityStatus string

const (
	//Created is the activity generated when a service is created
	Created ActivityType = "created"

	//Deployed is the activity generated when a service is deployed
	Deployed ActivityType = "deployed"

	//DevDeployed is the activity generated when a service is deployed in dev mode
	DevDeployed ActivityType = "devdeployed"

	//Destroyed is the activity generated when a service is destroyed
	Destroyed ActivityType = "destroyed"

	//Updated is the activity generated when a service's manifest is updated
	Updated ActivityType = "updated"

	//InProgress is the status when a service is changing between two states
	InProgress ActivityStatus = "inprogress"

	//Failed is the status when a service failed to change state
	Failed ActivityStatus = "failed"

	//Completed is the status when a service successfully changed stated
	Completed ActivityStatus = "complete"
)

var activityTypeComparison = map[ActivityType]int{
	Created:   1,
	Deployed:  2,
	Destroyed: 3,
}

// Activity is any step of the service lifecycle
type Activity struct {
	Model
	Type       ActivityType   `json:"type,omitempty"`
	Status     ActivityStatus `json:"status,omitempty" gorm:"index"`
	ServiceID  string         `json:"-,omitempty"`
	ActorID    string         `json:"-"`
	ActorEmail string         `json:"actor,omitempty" gorm:"-"`

	// Links
	Logs string `json:"logs,omitempty" gorm:"-"`
}

// ActivityLog are all the logs generated by an activity
type ActivityLog struct {
	Model
	ActivityID string `json:"activity,omitempty"`
	Log        string `json:"log,omitempty"`
}

// IsOlder returns true if a is older, or false otherwise
func (a *Activity) IsOlder(b *Activity) bool {
	if a.UpdatedAt.Equal(b.UpdatedAt) {
		// if the activities are updated at the same time, we do it based in the expected lifecycle
		// this is most often in tests
		return activityTypeComparison[a.Type] < activityTypeComparison[b.Type]
	}

	return a.UpdatedAt.Before(b.UpdatedAt)
}
